esphome:
  name: perimeter
  friendly_name: ControlPerimeterLight

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:

api:
  encryption:
    key: "+kpW/8XZc8atYGG9m3lLsdG88eSMLkZVp0IsCpYHr38="

ota:
  - platform: esphome
    password: "54bf91a970d60661e685445975cd7623"

wifi:
  ssid: !secret wifi_ssidt
  password: !secret wifi_passwordt

captive_portal:

web_server:
  port: 80

output:
  - platform: ledc
    pin: GPIO3
    frequency: 1000 Hz
    id: pwm_dimmer
    min_power: 0.09
    max_power: 1.0

switch:
  - platform: gpio
    id: spalnaP
    pin: 
      number: GPIO5
      inverted: true
    name: "SpalnaP"

  - platform: gpio
    id: zalP
    pin: 
      number: GPIO6
      inverted: true
    name: "ZalP"

button:
  - platform: template
    name: "SpalnaP (Toggle)"
    on_press:
      - switch.turn_on: spalnaP
      - delay: 300ms
      - switch.turn_off: spalnaP

  - platform: template
    name: "ZalP (Toggle)"
    on_press:
      - switch.turn_on: zalP
      - delay: 300ms
      - switch.turn_off: zalP

sensor:
  - platform: uptime
    name: "Uptime Seconds"
    id: uptime_sensor
    update_interval: 60s

  - platform: internal_temperature
    name: "Controller Temperature"
    update_interval: 10s
    state_class: measurement
    device_class: temperature

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

light:
  - platform: monochromatic
    name: "SpalnaPDimm"
    id: analog_dimmer
    output: pwm_dimmer
    default_transition_length: 0.5s
    restore_mode: RESTORE_DEFAULT_ON
    gamma_correct: 1.5

text_sensor:
  - platform: template
    name: "Uptime (formatted)"
    update_interval: 60s
    lambda: |-
      int seconds = (int) id(uptime_sensor).state;
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      char buffer[32];
      sprintf(buffer, "%dd %02dh %02dm", days, hours, minutes);
      return std::string(buffer);
    icon: "mdi:clock-outline"